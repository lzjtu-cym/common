##导入宏定义
$!init
$!define

##设置表后缀（宏定义）
#setTableSuffix("Controller")

##保存文件（宏定义）
#save("/controller", "Controller.java")

##包路径（宏定义）
#setPackageSuffix("controller")

##定义服务名
#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))

##定义实体对象名
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.cym.springboot.common.utils.ResponseUtil;
import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;
import $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;

##表注释（宏定义）
#tableComment("表控制层")
@RestController
@Api(description = "$!tableInfo.comment - 控制层")
@RequestMapping("$!tool.firstLowerCase($!tableInfo.name)")
public class $!{tableName} {

    private static final Logger logger = LoggerFactory.getLogger($!{tableName}.class);
    /**
     * 服务对象
     */
    @Autowired
    private I$!{tableInfo.name}Service $!{serviceName};

    @ApiOperation(value = "$!tableInfo.comment - 通过id查询", notes = "用户查询")
    @GetMapping("get-by-id")
    public Object getById(@RequestParam("id") String id) {
        try {
            return ResponseUtil.successObjectResponse($!{serviceName}.getById(id));
        } catch (Exception e) {
            logger.error("查询失败", e);
            return ResponseUtil.faliedResponse("查询失败！", e.getMessage());
        }
    }

    @ApiOperation(value = "$!tableInfo.comment - 条件查询", notes = "用户ids查询")
    @GetMapping("gets")
    public Object getListData(@ModelAttribute $!tableInfo.name $!entityName) {
        try {
            return ResponseUtil.successObjectResponse($!{serviceName}.list(new QueryWrapper<$!tableInfo.name>()));
        } catch (Exception e) {
            logger.error("查询失败", e);
            return ResponseUtil.faliedResponse("查询失败！", e.getMessage());
        }
    }

    @ApiOperation(value = "$!tableInfo.comment - 新增", notes = "用户新增")
    @PostMapping("posts")
    public Object insert(@ModelAttribute $!tableInfo.name $!entityName) {
        try {
            $!{serviceName}.save($!entityName);
            return ResponseUtil.successResponse("新增成功！");
        } catch (Exception e) {
            logger.error("新增失败", e);
            return ResponseUtil.faliedResponse("新增失败！", e.getMessage());
        }
    }

    @ApiOperation(value = "$!tableInfo.comment - 修改", notes = "用户修改")
    @PostMapping("edit")
    public Object update(@ModelAttribute $!tableInfo.name $!entityName) {
        try {
           $!{serviceName}.updateById($!entityName);
            return ResponseUtil.successResponse("新增成功！");
        } catch (Exception e) {
            logger.error("修改失败", e);
            return ResponseUtil.faliedResponse("修改失败！", e.getMessage());
        }
    }
    
    @ApiOperation(value = " - 删除", notes = "用户id删除")
    @DeleteMapping("deletes")
    public Object delete(@RequestParam("id") String id) {
        try {
            $!{serviceName}.removeById(id);
            return ResponseUtil.successResponse("删除成功！");
        } catch (Exception e) {
            logger.error("删除失败", e);
            return ResponseUtil.faliedResponse("删除失败！", e.getMessage());
        }
    }

    @ApiOperation(value = "$!tableInfo.comment - 删除", notes = "用户ids删除，多个逗号隔开")
    @DeleteMapping("deletes-by-id")
    public Object deletesById(@RequestParam("ids") String ids) {
        try {
           $!{serviceName}.removeByIds(Arrays.asList(ids.split(",")));
            return ResponseUtil.successResponse("新增成功！");
        } catch (Exception e) {
            logger.error("删除失败", e);
            return ResponseUtil.faliedResponse("删除失败！", e.getMessage());
        }
    }
}